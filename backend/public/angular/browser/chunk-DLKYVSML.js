import{Dc as S,Fc as f,G as a,Ia as u,Lc as v,M as h,Rc as g,ba as l,ga as p,la as c,s as n,v as m}from"./chunk-SAZU6VCU.js";var o="access_token",U="refresh_token",d="user_info",A=class i{http=c(f);router=c(v);isAuthenticated=u(!1);currentUser=u(null);loginUrl=g.apiUrl+"/auth/login";usersUrl=g.apiUrl+"/users";constructor(){this.loadSessionFromStorage()}loadSessionFromStorage(){let e=localStorage.getItem(o),t=localStorage.getItem(d);if(e&&t)try{let r=JSON.parse(t);this.isAuthenticated.set(!0),this.currentUser.set(r),console.log("AuthService: Session loaded from storage.",r)}catch(r){console.error("AuthService: Error parsing user from storage.",r),this.clearUserSessionAndSignals()}else this.clearUserSessionAndSignals()}storeTokens(e,t){localStorage.setItem(o,e),t&&localStorage.setItem(U,t)}storeUserInfo(e){localStorage.setItem(d,JSON.stringify(e))}clearUserSessionAndSignals(){localStorage.removeItem(o),localStorage.removeItem(U),localStorage.removeItem(d),this.isAuthenticated.set(!1),this.currentUser.set(null)}getCurrentUserFromBackend(){let e=this.getAccessToken(),t;return e&&(t=new S({"Content-Type":"application/json",codrr_token:e})),this.http.get(`${this.usersUrl}/perfil/me`,{headers:t}).pipe(l(r=>{this.currentUser.set(r),this.storeUserInfo(r),this.isAuthenticated.set(!0),console.log("AuthService: Usuario actualizado desde el backend",r)}),a(r=>(console.error("Error al obtener el usuario actual desde el backend",r),this.clearUserSessionAndSignals(),this.router.navigate(["/login"]),n(()=>r))))}getAccessToken(){return localStorage.getItem(o)}login(e){let t={email:e.email,password:e.password};return this.http.post(this.loginUrl,t).pipe(h(1e3),m(r=>{let s={id:r.user.id,role:r.user.role,email:e.email,username:e.email.split("@")[0]};return{accessToken:r.accessToken,user:s}}),l(r=>{this.storeTokens(r.accessToken,r.refreshToken),this.storeUserInfo(r.user),this.isAuthenticated.set(!0),this.currentUser.set(r.user),console.log("AuthService: Login successful, internal signals updated.")}),a(this.handleError))}loginPromise(e){return new Promise((t,r)=>{this.login(e).subscribe({next:s=>t(s),error:s=>r(s)})})}logout(){console.log("AuthService: logout - Clearing session and signals..."),this.clearUserSessionAndSignals(),this.router.navigate(["/login"])}handleError(e){let t="Login failed. Please check your credentials or network.";return e.error instanceof ErrorEvent?t=`An error occurred: ${e.error.message}`:e.status===400&&e.error&&e.error.error?t=e.error.error:e.status===401?t="Unauthorized. Please check your credentials.":t=`Server error: ${e.status}. ${e.message}`,console.error(t,e),n(()=>new Error(t))}static \u0275fac=function(t){return new(t||i)};static \u0275prov=p({token:i,factory:i.\u0275fac,providedIn:"root"})};export{A as a};
